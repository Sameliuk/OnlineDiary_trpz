@model OnlineDiaryApp.Models.Note

@{
    ViewData["Title"] = "Редагувати нотатку";
}

<link rel="stylesheet" href="~/css/note.css" />

<div class="note-page">
    <div class="note-container">
        <h2>Редагувати нотатку</h2>

        <form asp-action="Edit" method="post" enctype="multipart/form-data">

            <input type="hidden" asp-for="Id" />

            <!-- Назва -->
            <div class="form-group">
                <label asp-for="Title">Назва нотатки</label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <!-- Панель форматування -->
            <div class="editor-toolbar">
                <button type="button" onclick="formatText('bold')"><b>B</b></button>
                <button type="button" onclick="formatText('italic')"><i>I</i></button>
                <button type="button" onclick="formatText('underline')"><u>U</u></button>
                <button type="button" onclick="formatText('insertUnorderedList')">• Список</button>
                <button type="button" onclick="formatText('insertOrderedList')">1. Список</button>
                <button type="button" onclick="insertLink()">🔗 Посилання</button>
            </div>

            <!-- Зміст -->
            <div class="form-group">
                <label asp-for="Content">Зміст нотатки</label>
                <div id="editor" contenteditable="true" class="note-editor">@Html.Raw(Model.Content)</div>
                <textarea id="hiddenContent" name="Content" hidden></textarea>
                <span asp-validation-for="Content" class="text-danger"></span>
            </div>

            <!-- Теги -->
            <div class="form-group">
                <label for="tagSelect">Теги</label>
                <div id="tagSelectContainer">
                    <select id="tagSelect" class="form-control">
                        <option value="">— Оберіть тег —</option>
                        @foreach (var tag in ViewBag.Tags)
                        {
                            <option value="@tag.Id">@tag.Name</option>
                        }
                    </select>

                    <div id="selectedTags" class="selected-tags">
                        @foreach (var tag in Model.Tags)
                        {
                            <span class="tag-item" data-id="@tag.Id">
                                @tag.Name
                                <button type="button" class="remove-tag">×</button>
                            </span>
                            <input type="hidden" name="tagIds" value="@tag.Id" />
                        }
                    </div>
                </div>
            </div>

            <!-- Нагадування -->
            <div class="form-group">
                <label for="remindAt">Нагадування</label>
                <input type="datetime-local" id="remindAt" name="remindAt"
                       value="@(ViewBag.Reminder != null ? ((DateTime)ViewBag.Reminder.RemindAt).ToString("yyyy-MM-ddTHH:mm") : "")"
                       class="form-control" />
            </div>

            <!-- Існуючі файли -->
            <div class="form-group">
                <label>Прикріплені файли:</label>
                @if (Model.Files.Any())
                {
                    <ul id="existingFiles">
                        @foreach (var file in Model.Files)
                        {
                            <li>
                                <a href="@file.FilePath" target="_blank">@file.FileName</a>
                                <button type="button" class="remove-file" data-id="@file.Id">×</button>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>Файлів немає</p>
                }
            </div>

            <!-- Google Drive -->
            <div class="form-group">
                <label>Додати файли з Google Drive</label>
                <button type="button" id="pickFromDrive" class="btn btn-secondary">Вибрати з Google Drive</button>
                <div id="driveFilesContainer" class="mt-2"></div>
            </div>

            <!-- Голосова нотатка -->
            <div class="form-group">
                <label>Голосова нотатка</label>
                <div>
                    <button type="button" id="startRecording" class="btn btn-info">Записати</button>
                    <button type="button" id="stopRecording" class="btn btn-warning" disabled>Зупинити</button>
                </div>
                <audio id="audioPlayback" controls style="display:none;"></audio>
                <input type="file" id="voiceNoteFile" name="voiceNote" accept="audio/*" hidden />
            </div>


            <div class="note-actions">
                <a asp-controller="Notebook" asp-action="Index" class="btn-cancel">Скасувати</a>
                <button type="submit" class="btn-update">Оновити</button>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script src="https://apis.google.com/js/api.js"></script>
    <script>
        
        const SCOPES = 'https://www.googleapis.com/auth/drive.readonly';

        let tokenClient;
        let accessToken = null;

        function gapiLoaded() {
            gapi.load('client:picker', initializePicker);
        }

        async function initializePicker() {
            await gapi.client.init({ apiKey: API_KEY });
            tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: SCOPES,
                callback: (tokenResponse) => {
                    accessToken = tokenResponse.access_token;
                    createPicker();
                },
            });
        }

        function createPicker() {
            if (!accessToken) return;
            const view = new google.picker.View(google.picker.ViewId.DOCS);
            const picker = new google.picker.PickerBuilder()
                .addView(view)
                .setOAuthToken(accessToken)
                .setDeveloperKey(API_KEY)
                .setCallback(pickerCallback)
                .build();
            picker.setVisible(true);
        }

        function pickerCallback(data) {
            if (data.action === google.picker.Action.PICKED) {
                const filesContainer = document.getElementById("driveFilesContainer");
                data.docs.forEach(file => {
                    const fileUrl = `https://drive.google.com/file/d/${file.id}/view`;
                    const div = document.createElement("div");
                    div.innerHTML = `<a href="${fileUrl}" target="_blank">${file.name}</a>
                                             <input type="hidden" name="GoogleDriveLinks" value="${fileUrl}" />`;
                    filesContainer.appendChild(div);
                });
            }
        }

        document.getElementById('pickFromDrive').addEventListener('click', () => {
            if (!tokenClient) return;
            tokenClient.requestAccessToken();
        });

        window.addEventListener('load', gapiLoaded);

        document.addEventListener('DOMContentLoaded', function () {
            // Теги
            const tagSelect = document.getElementById('tagSelect');
            const selectedTagsContainer = document.getElementById('selectedTags');

            tagSelect.addEventListener('change', function () {
                const selectedValue = this.value;
                const selectedText = this.options[this.selectedIndex].text;
                if (!selectedValue) return;
                if (selectedTagsContainer.querySelector(`[data-id="${selectedValue}"]`)) { this.value = ""; return; }

                const tagEl = document.createElement('span');
                tagEl.className = 'tag-item';
                tagEl.dataset.id = selectedValue;
                tagEl.innerHTML = `${selectedText} <button type="button" class="remove-tag">×</button>`;

                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'tagIds';
                hiddenInput.value = selectedValue;

                selectedTagsContainer.appendChild(tagEl);
                selectedTagsContainer.appendChild(hiddenInput);

                this.value = "";
            });

            selectedTagsContainer.addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-tag')) {
                    const tagEl = e.target.closest('.tag-item');
                    const tagId = tagEl.dataset.id;
                    tagEl.remove();
                    selectedTagsContainer.querySelector(`input[value="${tagId}"]`)?.remove();
                }
            });

            // Зберігає HTML перед відправкою
            document.querySelector("form").addEventListener("submit", function () {
                document.getElementById("hiddenContent").value = document.getElementById("editor").innerHTML;
            });
        });

        // 🟢 Винесено в глобальну область, щоб кнопки бачили функції
        function formatText(command) {
            document.execCommand(command, false, null);
        }

        function insertLink() {
            const url = prompt("Введіть URL:");
            if (url) {
                document.execCommand("createLink", false, url);
            }
        }

        /* --- Голосовий запис --- */
        let mediaRecorder;
        let audioChunks = [];

        const startBtn = document.getElementById("startRecording");
        const stopBtn = document.getElementById("stopRecording");
        const audioPlayback = document.getElementById("audioPlayback");
        const voiceNoteFile = document.getElementById("voiceNoteFile");

        startBtn.addEventListener("click", async () => {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
            mediaRecorder.onstop = e => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                const audioUrl = URL.createObjectURL(audioBlob);
                audioPlayback.src = audioUrl;
                audioPlayback.style.display = "block";

                const file = new File([audioBlob], "VoiceNote.webm", { type: "audio/webm" });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                voiceNoteFile.files = dataTransfer.files;
            };

            mediaRecorder.start();
            startBtn.disabled = true;
            stopBtn.disabled = false;
        });

        stopBtn.addEventListener("click", () => {
            mediaRecorder.stop();
            startBtn.disabled = false;
            stopBtn.disabled = true;
        });

    </script>

}